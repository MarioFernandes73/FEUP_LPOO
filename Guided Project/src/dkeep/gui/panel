package dkeep.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

import dkeep.logic.Game;
import dkeep.logic.GameObject;

public class SimpleGraphicsPanel extends JPanel implements KeyListener {

	private Game game;
	private JFrame frame;
	private String direction = null;
	
	private BufferedImage hero;
	
	/**
	 * Create the panel.
	 */
	public SimpleGraphicsPanel(Game game) {
		this.game = game;
		initialize();
		
		addKeyListener(this);
		loadImages();
		
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		frame.requestFocus(); // to receive keyboard events
		frame.addKeyListener(this);
	}

	private void initialize()
	{
		frame = new JFrame("Game");
		frame.setBounds(100, 100, 1080, 720);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
	}
	
	@Override
	public void paintComponents(Graphics g)
	{
		super.paintComponent(g);
		
		Graphics2D graphics = (Graphics2D) g;
		
		GameObject[][] map = game.getMap();
		
		for(int i = 0; i < map.length ; i++)
		{
			for(int j = 0; j< map[i].length; j++)
			{
				switch(map[i][j].toString())
				{
				case "X":
					g.drawImage(hero, j*32, i*32, null);
				}
			}
		}
		
	}



	private void loadImages()
	{
		try
		{
			this.hero = ImageIO.read(getClass().getResource("resources/hero.JPG"));
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		switch(e.getKeyCode())
		{
		case KeyEvent.VK_W:
		case KeyEvent.VK_UP:
			this.direction = "w";
			break;
		case KeyEvent.VK_A:
		case KeyEvent.VK_LEFT:
			this.direction = "a";
			break;
		case KeyEvent.VK_D:
		case KeyEvent.VK_RIGHT:
			this.direction = "d";
			break;
		case KeyEvent.VK_S:
		case KeyEvent.VK_DOWN:
			this.direction = "s";
			break;
		}
		repaint();
	}

	
	
	public void actionPerformed(ActionEvent e) 
	{
		repaint();
	}
	
	
	
	
	
	
	//Unused methods
	
	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
}
